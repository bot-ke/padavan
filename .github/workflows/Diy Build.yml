name: Build Padavan

on: 
  repository_dispatch:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
        cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
        
    - name: Clone source code
      run: |
        git clone --depth=1 https://github.com/a0575/padavan.git /opt/rt-n56u
        cd /opt/rt-n56u/toolchain-mipsel
        sh dl_toolchain.sh
        mkdir -p /opt/images/
    
    - name: Build Firmware
      env:
        TNAME: R6220
      run: |
        cd /opt/rt-n56u/trunk
        ################################################################################################
        #如果要修改默认IP：请把下面的 192.168.x.x 修改成你要设定的ip 然后删除前面的注释“#”
        ################################################################################################
        #sed -i 's/192.168.123.1/192.168.x.x/g' user/shared/defaults.h
        if [ ! -f configs/templates/$TNAME.config ] ; then
        echo "configs/templates/$TNAME.config not found "
        exit 1
        fi
        cp -f configs/templates/$TNAME.config .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        #################################################### ####################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        #################################################### ####################
        回声“CONFIG_FIRMWARE_INCLUDE_MENTOHUSTn”>> .config #MENTOHUST
        回声“CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT = y”>>.config#SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=y" >> .config # simple-obfs 干扰插件
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=y" >> .config #SS 服务器
        回声“CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER = y”>> .config #DNSFORWARDER
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y" >> .config #adbyby plus+
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=n" >> .config #内网FRPC
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #内网红外FRPS
        回声“CONFIG_FIRMWARE_INCLUDE_TUNSAFE=y”>> .config #TUNSAFE
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=y" >> .config #阿里DDNS
        回声“CONFIG_FIRMWARE_INCLUDE_SMARTDNS = y”>> .config #smartdns
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=y" >> .config #smartdns二进制文件
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=y" >> .config #集成v2ray执行文件（3.8M左右），如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=y" >> .config #集成trojan执行文件(1.1M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_KOOLPROXY=y" >> .config #KP广告过滤
        echo "CONFIG_FIRMWARE_INCLUDE_CADDY=y" >> .config #在线文件管理服务
        echo "CONFIG_FIRMWARE_INCLUDE_CADDYBIN=n" >> .config #集成caddu执行文件，此文件有13M，请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        回显“CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n”>> .config
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_INCLUDE_WYY=n" >> .config #网易云解锁
        echo "CONFIG_FIRMWARE_INCLUDE_WYYBIN=n" >> .config #网易云解锁GO版本执行文件（4M多）注意固件大小，不集成会自动下载
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=y" >> .config #zerotier ~1.3M
        #################################################### ##########################################
        #自定义添加其他功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        #sed -i '/自定义项/d' .config
        #echo "自定义项=y" >> .config
        #################################################### ##############################################
        须藤 ./clear_tree
        sudo ./build_firmware_modify $TNAME 0
        sudo mv -f 图片/*.trx /opt/images
    
    -名称：创建文档
      if    : $ {    { github.event_name != 'release' && success() }    }
      运行：|
        cd /opt/rt-n56u
        GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION"    ] && \
        image_name=images_$ { build_variant } _$ { GIT_VERSION } || image_name=images_$ { build_variant }
        cd /opt/图像； md5sum *.trx |tee md5sum.txt; 7z a -mx=9 $ {图片名称} .7z ./*
        echo "image_name=${image_name}" >> $GITHUB_ENV
          
    -名称 :生成发布标签
      id：标签
      运行：|
        echo "::set-output name=release_tag::$TNAME_$(date +%Y-%m-%d)"
        触摸释放.txt
        echo "::set-output name=status::success"
        
    - name : 上传要发布的固件
      使用： softprops/action-gh-release@v1
      if    : steps.tag.outputs.status == '成功' && !cancelled()
      环境：
        GITHUB_TOKEN    : $ {    { Secrets.workflow_token }    }     #提前配置好这里的环境变量
      和：
        标签名称： $ {    { steps.tag.outputs.release_tag }   }
        body_path：发布.txt
        文件： /opt/images/*.trx
